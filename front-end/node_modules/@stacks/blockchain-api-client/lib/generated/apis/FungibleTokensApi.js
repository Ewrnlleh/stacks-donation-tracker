"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).  [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FungibleTokensApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class FungibleTokensApi extends runtime.BaseAPI {
    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders.
     * Fungible token holders
     */
    async getFtHoldersRaw(requestParameters, initOverrides) {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token', 'Required parameter requestParameters.token was null or undefined when calling getFtHolders.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/tokens/ft/{token}/holders`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FungibleTokenHolderListFromJSON)(jsonValue));
    }
    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders.
     * Fungible token holders
     */
    async getFtHolders(requestParameters, initOverrides) {
        const response = await this.getFtHoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.FungibleTokensApi = FungibleTokensApi;
//# sourceMappingURL=FungibleTokensApi.js.map
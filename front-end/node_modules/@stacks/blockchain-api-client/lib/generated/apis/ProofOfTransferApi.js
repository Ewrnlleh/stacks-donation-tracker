"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).  [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProofOfTransferApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ProofOfTransferApi extends runtime.BaseAPI {
    /**
     * Retrieves details for a PoX cycle
     * Get PoX cycle
     */
    async getPoxCycleRaw(requestParameters, initOverrides) {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber', 'Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycle.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PoxCycleFromJSON)(jsonValue));
    }
    /**
     * Retrieves details for a PoX cycle
     * Get PoX cycle
     */
    async getPoxCycle(requestParameters, initOverrides) {
        const response = await this.getPoxCycleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves details for a signer in a PoX cycle
     * Get signer in PoX cycle
     */
    async getPoxCycleSignerRaw(requestParameters, initOverrides) {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber', 'Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSigner.');
        }
        if (requestParameters.signerKey === null || requestParameters.signerKey === undefined) {
            throw new runtime.RequiredError('signerKey', 'Required parameter requestParameters.signerKey was null or undefined when calling getPoxCycleSigner.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))).replace(`{${"signer_key"}}`, encodeURIComponent(String(requestParameters.signerKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PoxSignerFromJSON)(jsonValue));
    }
    /**
     * Retrieves details for a signer in a PoX cycle
     * Get signer in PoX cycle
     */
    async getPoxCycleSigner(requestParameters, initOverrides) {
        const response = await this.getPoxCycleSignerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * Get stackers for signer in PoX cycle
     */
    async getPoxCycleSignerStackersRaw(requestParameters, initOverrides) {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber', 'Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSignerStackers.');
        }
        if (requestParameters.signerKey === null || requestParameters.signerKey === undefined) {
            throw new runtime.RequiredError('signerKey', 'Required parameter requestParameters.signerKey was null or undefined when calling getPoxCycleSignerStackers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}/stackers`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))).replace(`{${"signer_key"}}`, encodeURIComponent(String(requestParameters.signerKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PoxCycleSignerStackersListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * Get stackers for signer in PoX cycle
     */
    async getPoxCycleSignerStackers(requestParameters, initOverrides) {
        const response = await this.getPoxCycleSignerStackersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of signers in a PoX cycle
     * Get signers in PoX cycle
     */
    async getPoxCycleSignersRaw(requestParameters, initOverrides) {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber', 'Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSigners.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PoxCycleSignersListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of signers in a PoX cycle
     * Get signers in PoX cycle
     */
    async getPoxCycleSigners(requestParameters, initOverrides) {
        const response = await this.getPoxCycleSignersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of PoX cycles
     * Get PoX cycles
     */
    async getPoxCyclesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/pox/cycles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PoxCycleListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of PoX cycles
     * Get PoX cycles
     */
    async getPoxCycles(requestParameters, initOverrides) {
        const response = await this.getPoxCyclesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ProofOfTransferApi = ProofOfTransferApi;
//# sourceMappingURL=ProofOfTransferApi.js.map
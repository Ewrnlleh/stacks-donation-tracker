/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).  [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json) 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FungibleTokenHolderList,
    FungibleTokenHolderListFromJSON,
    FungibleTokenHolderListToJSON,
} from '../models';

export interface GetFtHoldersRequest {
    token: string;
}

/**
 * FungibleTokensApi - interface
 * 
 * @export
 * @interface FungibleTokensApiInterface
 */
export interface FungibleTokensApiInterface {
    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders. 
     * @summary Fungible token holders
     * @param {string} token fungible token identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FungibleTokensApiInterface
     */
    getFtHoldersRaw(requestParameters: GetFtHoldersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokenHolderList>>;

    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders. 
     * Fungible token holders
     */
    getFtHolders(requestParameters: GetFtHoldersRequest, initOverrides?: RequestInit): Promise<FungibleTokenHolderList>;

}

/**
 * 
 */
export class FungibleTokensApi extends runtime.BaseAPI implements FungibleTokensApiInterface {

    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders. 
     * Fungible token holders
     */
    async getFtHoldersRaw(requestParameters: GetFtHoldersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FungibleTokenHolderList>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getFtHolders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/tokens/ft/{token}/holders`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FungibleTokenHolderListFromJSON(jsonValue));
    }

    /**
     * Retrieves the list of Fungible Token holders for a given token ID. Specify `stx` for the `token` parameter to get the list of STX holders. 
     * Fungible token holders
     */
    async getFtHolders(requestParameters: GetFtHoldersRequest, initOverrides?: RequestInit): Promise<FungibleTokenHolderList> {
        const response = await this.getFtHoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).  [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json) 
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PoxCycle,
    PoxCycleFromJSON,
    PoxCycleToJSON,
    PoxCycleListResponse,
    PoxCycleListResponseFromJSON,
    PoxCycleListResponseToJSON,
    PoxCycleSignerStackersListResponse,
    PoxCycleSignerStackersListResponseFromJSON,
    PoxCycleSignerStackersListResponseToJSON,
    PoxCycleSignersListResponse,
    PoxCycleSignersListResponseFromJSON,
    PoxCycleSignersListResponseToJSON,
    PoxSigner,
    PoxSignerFromJSON,
    PoxSignerToJSON,
} from '../models';

export interface GetPoxCycleRequest {
    cycleNumber: number;
}

export interface GetPoxCycleSignerRequest {
    cycleNumber: number;
    signerKey: string;
}

export interface GetPoxCycleSignerStackersRequest {
    cycleNumber: number;
    signerKey: string;
}

export interface GetPoxCycleSignersRequest {
    cycleNumber: number;
}

export interface GetPoxCyclesRequest {
    limit?: number;
    offset?: number;
}

/**
 * ProofOfTransferApi - interface
 * 
 * @export
 * @interface ProofOfTransferApiInterface
 */
export interface ProofOfTransferApiInterface {
    /**
     * Retrieves details for a PoX cycle
     * @summary Get PoX cycle
     * @param {number} cycleNumber PoX cycle number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProofOfTransferApiInterface
     */
    getPoxCycleRaw(requestParameters: GetPoxCycleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycle>>;

    /**
     * Retrieves details for a PoX cycle
     * Get PoX cycle
     */
    getPoxCycle(requestParameters: GetPoxCycleRequest, initOverrides?: RequestInit): Promise<PoxCycle>;

    /**
     * Retrieves details for a signer in a PoX cycle
     * @summary Get signer in PoX cycle
     * @param {number} cycleNumber PoX cycle number
     * @param {string} signerKey Signer key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProofOfTransferApiInterface
     */
    getPoxCycleSignerRaw(requestParameters: GetPoxCycleSignerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxSigner>>;

    /**
     * Retrieves details for a signer in a PoX cycle
     * Get signer in PoX cycle
     */
    getPoxCycleSigner(requestParameters: GetPoxCycleSignerRequest, initOverrides?: RequestInit): Promise<PoxSigner>;

    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * @summary Get stackers for signer in PoX cycle
     * @param {number} cycleNumber PoX cycle number
     * @param {string} signerKey Signer key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProofOfTransferApiInterface
     */
    getPoxCycleSignerStackersRaw(requestParameters: GetPoxCycleSignerStackersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleSignerStackersListResponse>>;

    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * Get stackers for signer in PoX cycle
     */
    getPoxCycleSignerStackers(requestParameters: GetPoxCycleSignerStackersRequest, initOverrides?: RequestInit): Promise<PoxCycleSignerStackersListResponse>;

    /**
     * Retrieves a list of signers in a PoX cycle
     * @summary Get signers in PoX cycle
     * @param {number} cycleNumber PoX cycle number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProofOfTransferApiInterface
     */
    getPoxCycleSignersRaw(requestParameters: GetPoxCycleSignersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleSignersListResponse>>;

    /**
     * Retrieves a list of signers in a PoX cycle
     * Get signers in PoX cycle
     */
    getPoxCycleSigners(requestParameters: GetPoxCycleSignersRequest, initOverrides?: RequestInit): Promise<PoxCycleSignersListResponse>;

    /**
     * Retrieves a list of PoX cycles
     * @summary Get PoX cycles
     * @param {number} [limit] max number of cycles to fetch
     * @param {number} [offset] index of first cycle to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProofOfTransferApiInterface
     */
    getPoxCyclesRaw(requestParameters: GetPoxCyclesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleListResponse>>;

    /**
     * Retrieves a list of PoX cycles
     * Get PoX cycles
     */
    getPoxCycles(requestParameters: GetPoxCyclesRequest, initOverrides?: RequestInit): Promise<PoxCycleListResponse>;

}

/**
 * 
 */
export class ProofOfTransferApi extends runtime.BaseAPI implements ProofOfTransferApiInterface {

    /**
     * Retrieves details for a PoX cycle
     * Get PoX cycle
     */
    async getPoxCycleRaw(requestParameters: GetPoxCycleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycle>> {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber','Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoxCycleFromJSON(jsonValue));
    }

    /**
     * Retrieves details for a PoX cycle
     * Get PoX cycle
     */
    async getPoxCycle(requestParameters: GetPoxCycleRequest, initOverrides?: RequestInit): Promise<PoxCycle> {
        const response = await this.getPoxCycleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details for a signer in a PoX cycle
     * Get signer in PoX cycle
     */
    async getPoxCycleSignerRaw(requestParameters: GetPoxCycleSignerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxSigner>> {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber','Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSigner.');
        }

        if (requestParameters.signerKey === null || requestParameters.signerKey === undefined) {
            throw new runtime.RequiredError('signerKey','Required parameter requestParameters.signerKey was null or undefined when calling getPoxCycleSigner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))).replace(`{${"signer_key"}}`, encodeURIComponent(String(requestParameters.signerKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoxSignerFromJSON(jsonValue));
    }

    /**
     * Retrieves details for a signer in a PoX cycle
     * Get signer in PoX cycle
     */
    async getPoxCycleSigner(requestParameters: GetPoxCycleSignerRequest, initOverrides?: RequestInit): Promise<PoxSigner> {
        const response = await this.getPoxCycleSignerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * Get stackers for signer in PoX cycle
     */
    async getPoxCycleSignerStackersRaw(requestParameters: GetPoxCycleSignerStackersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleSignerStackersListResponse>> {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber','Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSignerStackers.');
        }

        if (requestParameters.signerKey === null || requestParameters.signerKey === undefined) {
            throw new runtime.RequiredError('signerKey','Required parameter requestParameters.signerKey was null or undefined when calling getPoxCycleSignerStackers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers/{signer_key}/stackers`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))).replace(`{${"signer_key"}}`, encodeURIComponent(String(requestParameters.signerKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoxCycleSignerStackersListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of stackers for a signer in a PoX cycle
     * Get stackers for signer in PoX cycle
     */
    async getPoxCycleSignerStackers(requestParameters: GetPoxCycleSignerStackersRequest, initOverrides?: RequestInit): Promise<PoxCycleSignerStackersListResponse> {
        const response = await this.getPoxCycleSignerStackersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of signers in a PoX cycle
     * Get signers in PoX cycle
     */
    async getPoxCycleSignersRaw(requestParameters: GetPoxCycleSignersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleSignersListResponse>> {
        if (requestParameters.cycleNumber === null || requestParameters.cycleNumber === undefined) {
            throw new runtime.RequiredError('cycleNumber','Required parameter requestParameters.cycleNumber was null or undefined when calling getPoxCycleSigners.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/pox/cycles/{cycle_number}/signers`.replace(`{${"cycle_number"}}`, encodeURIComponent(String(requestParameters.cycleNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoxCycleSignersListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of signers in a PoX cycle
     * Get signers in PoX cycle
     */
    async getPoxCycleSigners(requestParameters: GetPoxCycleSignersRequest, initOverrides?: RequestInit): Promise<PoxCycleSignersListResponse> {
        const response = await this.getPoxCycleSignersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of PoX cycles
     * Get PoX cycles
     */
    async getPoxCyclesRaw(requestParameters: GetPoxCyclesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PoxCycleListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v2/pox/cycles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoxCycleListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of PoX cycles
     * Get PoX cycles
     */
    async getPoxCycles(requestParameters: GetPoxCyclesRequest, initOverrides?: RequestInit): Promise<PoxCycleListResponse> {
        const response = await this.getPoxCyclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
